from scipy.special import hyp2f1
from scipy import interpolate
from scipy.optimize import minimize
import numpy as np
import matplotlib.pyplot as plt
import matplotlib

# setup matplotlib for latex encoding
matplotlib.rcParams['text.usetex'] = True
matplotlib.rcParams['text.latex.unicode'] = True

# calculate the G/Gmax curve for the Borja-Amies model
def calcGGmax(Gmax, R, h, m):
    sig_b = R * np.logspace(-4, np.log10(0.95),30)
    GGmax = np.zeros(sig_b.shape)
    gamma = np.zeros(sig_b.shape)

    for ii in range(len(sig_b)):
        xi = 2.0 * sig_b[ii]
        temp = hyp2f1(m, m + 1.0, m + 2.0, xi / (R + sig_b[ii]))
        Gratio = 1.0 + 3.0 * Gmax / (h * xi) * ( xi * (xi / (R + sig_b[ii] - xi))**m * (1.0 - xi / (R + sig_b[ii]))**m * temp) / (m + 1.0)
        GGmax[ii] = 1.0 / Gratio
        gamma[ii] = sig_b[ii] / (Gmax * GGmax[ii])

    return gamma, GGmax

def errorGGmax(matProps):
    Gmax = 20000.0  / 2.0 / 1.499
    R = 100.0 * np.sqrt(1.5)

    gamma = np.array([0.000001,1.46779926762207E-06,2.15443469003188E-06,3.16227766016838E-06,4.64158883361278E-06,6.81292069057961E-06,0.00001,1.46779926762207E-05,2.15443469003188E-05,3.16227766016838E-05,4.64158883361278E-05,6.81292069057961E-05,0.0001,0.000146779926762207,0.000215443469003188,0.000316227766016838,0.000464158883361278,0.000681292069057962,0.001,0.00146779926762207,0.00215443469003188,0.00316227766016838,0.00464158883361278,0.00681292069057962,0.01,0.0146779926762207,0.0215443469003188,0.0316227766016838,0.0464158883361278,0.0681292069057961,0.1])
    GGmax = np.array([0.996382953705276,0.994861256231364,0.99270406573663,0.989650729753748,0.985338450348984,0.979266996089046,0.970755928967041,0.958897645800368,0.942515642895344,0.920148056371517,0.890091991508687,0.850560231863176,0.800004505757593,0.737621603786061,0.66395380832027,0.581341952704325,0.493901649598303,0.406832831486522,0.325248893117315,0.253045971964227,0.192303464438894,0.143343763442167,0.10522510014132,0.0763398163914096,0.0548973287061038,0.0392219019122197,0.0278903611290704,0.0197652501878291,0.0139731492038893,0.00986131692042327,0.00695093024931982])

    gammaMat, GGmaxMat = calcGGmax(Gmax, R, matProps[0], matProps[1])
    ggMaxIntFunc = interpolate.interp1d(np.log10(gamma), GGmax, kind = 'linear', fill_value='extrapolate' )
    GGmax_int = ggMaxIntFunc(np.log10(gammaMat))
    return np.sum((GGmax_int - GGmaxMat)**2.0)

def main() :
    Gmax = 20000.0  / 2.0 / 1.499
    R = 100.0 * np.sqrt(1.5)
    
    gamma = np.array([0.000001,1.46779926762207E-06,2.15443469003188E-06,3.16227766016838E-06,4.64158883361278E-06,6.81292069057961E-06,0.00001,1.46779926762207E-05,2.15443469003188E-05,3.16227766016838E-05,4.64158883361278E-05,6.81292069057961E-05,0.0001,0.000146779926762207,0.000215443469003188,0.000316227766016838,0.000464158883361278,0.000681292069057962,0.001,0.00146779926762207,0.00215443469003188,0.00316227766016838,0.00464158883361278,0.00681292069057962,0.01,0.0146779926762207,0.0215443469003188,0.0316227766016838,0.0464158883361278,0.0681292069057961,0.1])
    GGmax = np.array([0.996382953705276,0.994861256231364,0.99270406573663,0.989650729753748,0.985338450348984,0.979266996089046,0.970755928967041,0.958897645800368,0.942515642895344,0.920148056371517,0.890091991508687,0.850560231863176,0.800004505757593,0.737621603786061,0.66395380832027,0.581341952704325,0.493901649598303,0.406832831486522,0.325248893117315,0.253045971964227,0.192303464438894,0.143343763442167,0.10522510014132,0.0763398163914096,0.0548973287061038,0.0392219019122197,0.0278903611290704,0.0197652501878291,0.0139731492038893,0.00986131692042327,0.00695093024931982])

    res = minimize(errorGGmax, [Gmax, 1.0], method='nelder-mead')
 
    print("h = " + str(res.x[0]) + " and m = " + str(res.x[1]))

    gamma_new, GGmax_new = calcGGmax(Gmax, R, res.x[0], res.x[1])

    plt.figure()
    plt.semilogx(gamma * 100.0, GGmax, label = "Darendeli")
    plt.semilogx(gamma_new * 100.0, GGmax_new, label = "Borja")
    plt.xlim(1.0e-4,10.0)
    plt.ylim(0.0,1.0)
    plt.grid(which='both')
    plt.legend()
    plt.show()
    

if __name__ == "__main__":
    main()